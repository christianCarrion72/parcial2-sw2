package com.parcial2.consul.domain;

import static com.parcial2.consul.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class HistoriaClinicaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoriaClinicaAllPropertiesEquals(HistoriaClinica expected, HistoriaClinica actual) {
        assertHistoriaClinicaAutoGeneratedPropertiesEquals(expected, actual);
        assertHistoriaClinicaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoriaClinicaAllUpdatablePropertiesEquals(HistoriaClinica expected, HistoriaClinica actual) {
        assertHistoriaClinicaUpdatableFieldsEquals(expected, actual);
        assertHistoriaClinicaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoriaClinicaAutoGeneratedPropertiesEquals(HistoriaClinica expected, HistoriaClinica actual) {
        assertThat(actual)
            .as("Verify HistoriaClinica auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoriaClinicaUpdatableFieldsEquals(HistoriaClinica expected, HistoriaClinica actual) {
        assertThat(actual)
            .as("Verify HistoriaClinica relevant properties")
            .satisfies(a ->
                assertThat(a.getFecha()).as("check fecha").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getFecha())
            )
            .satisfies(a -> assertThat(a.getSintomas()).as("check sintomas").isEqualTo(expected.getSintomas()))
            .satisfies(a -> assertThat(a.getDiagnostico()).as("check diagnostico").isEqualTo(expected.getDiagnostico()))
            .satisfies(a -> assertThat(a.getTratamiento()).as("check tratamiento").isEqualTo(expected.getTratamiento()))
            .satisfies(a -> assertThat(a.getHashBlockchain()).as("check hashBlockchain").isEqualTo(expected.getHashBlockchain()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoriaClinicaUpdatableRelationshipsEquals(HistoriaClinica expected, HistoriaClinica actual) {
        assertThat(actual)
            .as("Verify HistoriaClinica relationships")
            .satisfies(a -> assertThat(a.getPaciente()).as("check paciente").isEqualTo(expected.getPaciente()));
    }
}
